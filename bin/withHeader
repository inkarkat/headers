#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
If non-empty input is piped into this command, prepends HEADER before the
output. If there's no output, nothing is printed. Trailing empty lines at the
end of the input are omitted. An empty separator line is added before all
HEADERs (except the first one if --id ID (e.g. use PARENT-COMMAND-NAME-\$\$) is
passed to invocations of this command so that the sequence can be uniquely
identified).
HELPTEXT
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[--id ID] [--no-newline] [--color=(always|auto|never)|--no-color] [--] HEADER [...] [-?|-h|--help]'
}

: ${HEADER_PREFIX=[01m}
: ${HEADER_SUFFIX=[0m}
: ${HEADER_SEPARATOR=$'\n'}
: ${HEADER_COLON=:}
: ${HEADER_NEWLINE=:'\n'}
: ${HEADER_WIDTH=}
typeset -a colorArg=()
isIdChange() { return 1; }
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--id)		shift; passedId="$1"; shift
			marker()
			{
			    XDG_CONFIG_HOME=${XDG_RUNTIME_DIR:?} executionMarker --group withHeader "$@"
			}
			isIdChange()
			{
			    local isChange=t
			    marker --query "$passedId" --within 1h && isChange=

			    # Omit separator on the first header associated with
			    # ID, and record the ID to be able to recognize it on
			    # subsequent calls.
			    marker --update "$passedId"

			    [ "$isChange" ]
			}
			;;
	--no-newline)	shift; HEADER_NEWLINE=' ';;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
header="$*"
[ "$HEADER_WIDTH" ] && printf -v header "%${HEADER_WIDTH}s" "$header"

if ! isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    HEADER_PREFIX=
    HEADER_SUFFIX=
fi


# Consume first line(s) until we have a non-blank one; then we know that we need
# a header first.
buffer=
while IFS=$'\n' read -r line || [ -n "$line" ]
do
    buffer="${buffer}${line}
"
    if [ "$line" ]; then
	isIdChange && HEADER_SEPARATOR=
	printf "${HEADER_SEPARATOR}%s%s%s${HEADER_COLON}${HEADER_NEWLINE}%s" "$HEADER_PREFIX" "$header" "$HEADER_SUFFIX" "$buffer"
	break
    fi
done

# Delete all trailing blank lines at the end of the input.
exec sed --unbuffered -e :a -e '/^\n*$/{$d; N; ba' -e '}'
