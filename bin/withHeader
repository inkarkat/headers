#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | [HEADER_SEPARATOR=...] [HEADER_COLON=...] [HEADER_NEWLINE=...] [HEADER_WIDTH=N] %q %s\n' "$(basename "$1")" '[--id ID] [--no-newline] [--color=(always|auto|never)|--no-color] [--] HEADER [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
If non-empty input is piped into this command, prepends HEADER before the
output. If there's no output, nothing is printed. Trailing empty lines at the
end of the input are omitted. An empty separator line is added before all
HEADERs (except the first one).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --id ID		ID to uniquely identify invocations of this command
			(e.g. use PARENT-COMMAND-NAME-\$\$), so that the first
			one does not add an empty separator line.
    --no-newline	Directly append input after the header and indent
			additional indent lines by the header width. By default,
			input appears unindented on new lines.
HELPTEXT
}

: ${HEADER_COLOR=[1m}
: ${HEADER_RESET=[0m}
: ${HEADER_SEPARATOR=$'\n'}
: ${HEADER_COLON=:}
: ${HEADER_NEWLINE='\n'}
: ${HEADER_WIDTH=}
typeset -a colorArg=()
isHeaderIndent=
isIdChange() { return 1; }
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--id)		shift; passedId="$1"; shift
			marker()
			{
			    executionMarker --base-type runtime --group withHeader "$@"
			}
			isIdChange()
			{
			    local isChange=t
			    marker --query "$passedId" --within 1h && isChange=

			    # Omit separator on the first header associated with
			    # ID, and record the ID to be able to recognize it on
			    # subsequent calls.
			    marker --update "$passedId"

			    [ "$isChange" ]
			}
			;;
	--no-newline)	shift; HEADER_NEWLINE=' '; isHeaderIndent=t;;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
header="$*"
[ "$HEADER_WIDTH" ] && printf -v header "%${HEADER_WIDTH}s" "$header"

if ! isNeedColorArgumentWhenPiping "${colorArg[@]}"; then
    HEADER_COLOR=''
    HEADER_RESET=''
fi

typeset -a furtherLineProcessingSedArgs=()
if [ "$isHeaderIndent" ]; then
    printf -v headerLikeIndent "%$((${#header} + ${#HEADER_COLON} + ${#HEADER_NEWLINE}))s" ' '
    furtherLineProcessingSedArgs=(-e "/./s/^/${headerLikeIndent}/")
fi

# Consume first line(s) until we have a non-blank one; then we know that we need
# a header first.
buffer=
while IFS=$'\n' read -r line || [ -n "$line" ]
do
    buffer+="$line"$'\n'
    if [ -n "$line" ]; then
	isIdChange && HEADER_SEPARATOR=
	printf "${HEADER_SEPARATOR}%s%s%s%s%s${HEADER_COLON}${HEADER_NEWLINE}%s" "$HEADER_COLOR" "$HEADER_PREFIX" "$header" "$HEADER_SUFFIX" "$HEADER_RESET" "$buffer"
	break
    fi
done

# Delete all trailing blank lines at the end of the input.
exec sed --unbuffered "${furtherLineProcessingSedArgs[@]}" -e :a -e '/^\n*$/{$d; N; ba' -e '}'
